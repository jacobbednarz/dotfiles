" Forget compatibility with Vi - Not important.
set nocompatible

" Make backspace work sanely like other apps
set backspace=indent,eol,start

set colorcolumn=72
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
filetype on
filetype plugin on
filetype indent on
syntax on

" Always use unix line endings.
set ff=unix

" No beeps
set noerrorbells

" Declare bundles are handled via Vundle.
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Let Vundle manage vim packages.
Plugin 'gmarik/Vundle.vim'

" Define bundles via GitHub repos.
Plugin 'vim-ruby/vim-ruby'
Plugin 'itchyny/lightline.vim'
Plugin 'w0ng/vim-hybrid'
Plugin 'kchmck/vim-coffee-script'
Plugin 'tpope/vim-cucumber'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-surround'
Plugin 'rodjek/vim-puppet'
Plugin 'vim-scripts/ctags.vim'
Plugin 'tpope/vim-commentary'
Plugin 'xenoterracide/html.vim'
Plugin 'airblade/vim-gitgutter'
Plugin 'scrooloose/nerdtree'
Plugin 'fatih/vim-go'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'godlygeek/tabular'
Plugin 'editorconfig-vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'scrooloose/syntastic'
Plugin 'rking/ag.vim'
Plugin 'majutsushi/tagbar'
Plugin 'jez/vim-github-hub'
Plugin 'craigemery/vim-autotag'
Plugin 'cespare/vim-toml'
Plugin 'elzr/vim-json'
Plugin 'empanda/vim-varnish'
Plugin 'Raimondi/delimitMate'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'google/vim-searchindex'

" Required for Vundle.
call vundle#end()

" Move around lines and selections of text.
nnoremap <C-k> :m .+2<CR>==
nnoremap <C-j> :m .-2<CR>==
inoremap <C-k> <Esc>:m .+1<CR>==gi
inoremap <C-j> <Esc>:m .-2<CR>==gi
vnoremap <C-k> :m '>+1<CR>gv=gv
vnoremap <C-j> :m '<-2<CR>gv=gv

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Don't create a scrollbar on the left - usually makes NERDTree look average.
set go-=L

" Write the old file out when switching between files.
set autowrite

" Display current cursor position in lower right corner.
set ruler

" Fix the leader + command lag.
set timeoutlen=500

" Switch between buffers without saving.
set hidden

" Set the color scheme.
let g:hybrid_reduced_contrast = 1
set background=dark
colorscheme hybrid

" Set font type and size.
set guifont=Fira\ Code:h15

" Tab stuff.
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Show command in bottom right portion of the screen.
set showcmd

" Show line numbers.
set number

" Indent stuff.
set smartindent
set autoindent

" Always show the status line.
set laststatus=2

" Prefer a slightly higher line height.
set linespace=2

" Better line wrapping.
set wrap
set linebreak
set textwidth=72

" Set incremental searching.
set incsearch

" Highlight searching.
set hlsearch

" Case insensitive search.
set ignorecase
set smartcase

" Hard-wrap paragraphs of text.
nnoremap <leader>q gqip

" Hide mouse when typing.
set mousehide

if has('mouse')
  set mouse=a
endif

" Split windows below the current window.
set splitbelow
set splitright

" Session settings.
set sessionoptions=resize,winpos,winsize,buffers,tabpages,folds,curdir,help

" Map NERDTree to a simpler key.
map <C-t> :NERDTreeToggle<CR>

" Map ctrlp to ctrl + f
let g:ctrlp_map = '<C-f>'
let g:ctrlp_cmd = 'CtrlP'

" Use ag instead for file searching
let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
      \ --ignore .git
      \ --ignore .svn
      \ --ignore .hg
      \ --ignore .DS_Store
      \ -g ""'

" Map tagbar to use F8
nmap <F8> :TagbarToggle<CR>

" File specific indentation.
autocmd FileType html setlocal shiftwidth=2 tabstop=2
autocmd FileType php setlocal shiftwidth=2 tabstop=2
autocmd FileType ruby setlocal shiftwidth=2 tabstop=2
autocmd FileType js setlocal shiftwidth=2 tabstop=2
autocmd FileType md setlocal shiftwidth=4 tabstop=4
au BufRead,BufNewFile *.json set ft=json syntax=javascript
au BufRead,BufNewFile *.pp set syntax=puppet
au BufRead,BufNewFile *.bats set syntax=sh

" Format git commits at the correct lengths.
au FileType gitcommit set tw=72
au FileType gitcommit set colorcolumn=72

" Handle markdown files nicer.
au BufRead,BufNewFile *.md setlocal textwidth=72
autocmd BufRead,BufNewFile *.md set filetype=markdown

" Handle fenced code blocks in Markdown better.
let g:markdown_fenced_languages = ['c', 'css', 'html', 'ruby', 'bash=sh', 'dns', 'go', 'sql']

" Trim trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

" Source the vimrc file after saving it.
if has("autocmd")
  augroup myvimrchooks
    au!
      autocmd bufwritepost .vimrc source ~/.vimrc
  augroup END
endif

" Display extra whitespace.
set list listchars=tab:»·,trail:·,nbsp:·

" Configure lightline.
let g:lightline = { 'colorscheme': 'Tomorrow_Night_Eighties' }

" Stop vim creating backup files.
set nobackup
set noswapfile

" Make :W to :w
cnoreabbrev W w

" Automagically reload the files if altered outside of vim.
set autoread

let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"

  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

" Mark three back ticks as nested quotes in files where they are
" expected. I.e. markdown and git commits.
au FileType markdown let b:delimitMate_nesting_quotes = ['`']
au FileType gitcommit let b:delimitMate_nesting_quotes = ['`']
